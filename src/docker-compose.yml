services:
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test_network

  django-app-v1:
    build: 
      context: ./django-app-v1
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_NAME=testdb
      - DB_USER=testuser
      - DB_PASSWORD=testpass
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  express-app-v1:
    build:
      context: ./express-app-v1
      dockerfile: Dockerfile
    ports:
      - "3100:3100"
    environment:
      - DB_HOST=postgres
      - DB_NAME=testdb
      - DB_USER=testuser
      - DB_PASSWORD=testpass
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  postgrest-v120203:
    image: postgrest/postgrest:v12.2.3
    ports:
      - "3000:3000"
    environment:
      PGRST_DB_URI: postgres://testuser:testpass@postgres:5432/testdb
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: testuser
      PGRST_SERVER_PROXY_URI: "http://postgrest-v120203:3000" 
    volumes:
      - ./postgrest-v120203/postgrest.conf:/etc/postgrest.conf
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  test:
    image: grafana/k6:latest
    volumes:
      - ./k6/scripts:/scripts
      - ./k6/results:/results
    environment:
      - RECORDS=10
      - DURATION=5s
      - TARGET=2
    depends_on:
      - django-app-v1
      - express-app-v1
      - postgrest-v120203
    entrypoint: ["/bin/sh"]
    command: ["-c", "tail -f /dev/null"]
    networks:
      - test_network

networks:
  test_network:
